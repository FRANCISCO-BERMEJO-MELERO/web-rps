// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v3.21.12
// source: red/rps/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";
import { Params } from "./params";

export const protobufPackage = "red.rps";

/** MsgUpdateParams is the Msg/UpdateParams request type. */
export interface MsgUpdateParams {
  /** authority is the address that controls the module (defaults to x/gov unless overwritten). */
  authority: string;
  /** NOTE: All parameters must be supplied. */
  params: Params | undefined;
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 */
export interface MsgUpdateParamsResponse {
}

export interface MsgCreateGame {
  creator: string;
  bet: Coin | undefined;
  deadline: number;
}

export interface MsgCreateGameResponse {
  id: number;
}

export interface MsgJoinGame {
  creator: string;
  opponent: string;
  gameId: number;
}

export interface MsgJoinGameResponse {
}

export interface MsgPlayMove {
  creator: string;
  player: string;
  gameId: number;
  moveHash: string;
}

export interface MsgPlayMoveResponse {
}

export interface MsgRevealMove {
  creator: string;
  player: string;
  gameId: number;
  move: string;
  nonce: string;
}

export interface MsgRevealMoveResponse {
}

export interface MsgClaimTimeout {
  creator: string;
  player: string;
  gameId: number;
}

export interface MsgClaimTimeoutResponse {
}

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(message: MsgUpdateParams, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority) ? globalThis.String(object.authority) : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(base?: I): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(object: I): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(_: MsgUpdateParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(base?: I): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(_: I): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgCreateGame(): MsgCreateGame {
  return { creator: "", bet: undefined, deadline: 0 };
}

export const MsgCreateGame: MessageFns<MsgCreateGame> = {
  encode(message: MsgCreateGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.bet !== undefined) {
      Coin.encode(message.bet, writer.uint32(18).fork()).join();
    }
    if (message.deadline !== 0) {
      writer.uint32(24).uint64(message.deadline);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.bet = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.deadline = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      bet: isSet(object.bet) ? Coin.fromJSON(object.bet) : undefined,
      deadline: isSet(object.deadline) ? globalThis.Number(object.deadline) : 0,
    };
  },

  toJSON(message: MsgCreateGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.bet !== undefined) {
      obj.bet = Coin.toJSON(message.bet);
    }
    if (message.deadline !== 0) {
      obj.deadline = Math.round(message.deadline);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGame>, I>>(base?: I): MsgCreateGame {
    return MsgCreateGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGame>, I>>(object: I): MsgCreateGame {
    const message = createBaseMsgCreateGame();
    message.creator = object.creator ?? "";
    message.bet = (object.bet !== undefined && object.bet !== null) ? Coin.fromPartial(object.bet) : undefined;
    message.deadline = object.deadline ?? 0;
    return message;
  },
};

function createBaseMsgCreateGameResponse(): MsgCreateGameResponse {
  return { id: 0 };
}

export const MsgCreateGameResponse: MessageFns<MsgCreateGameResponse> = {
  encode(message: MsgCreateGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgCreateGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCreateGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCreateGameResponse {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: MsgCreateGameResponse): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(base?: I): MsgCreateGameResponse {
    return MsgCreateGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCreateGameResponse>, I>>(object: I): MsgCreateGameResponse {
    const message = createBaseMsgCreateGameResponse();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseMsgJoinGame(): MsgJoinGame {
  return { creator: "", opponent: "", gameId: 0 };
}

export const MsgJoinGame: MessageFns<MsgJoinGame> = {
  encode(message: MsgJoinGame, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.opponent !== "") {
      writer.uint32(18).string(message.opponent);
    }
    if (message.gameId !== 0) {
      writer.uint32(24).uint64(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinGame {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.opponent = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gameId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgJoinGame {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      opponent: isSet(object.opponent) ? globalThis.String(object.opponent) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
    };
  },

  toJSON(message: MsgJoinGame): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.opponent !== "") {
      obj.opponent = message.opponent;
    }
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinGame>, I>>(base?: I): MsgJoinGame {
    return MsgJoinGame.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinGame>, I>>(object: I): MsgJoinGame {
    const message = createBaseMsgJoinGame();
    message.creator = object.creator ?? "";
    message.opponent = object.opponent ?? "";
    message.gameId = object.gameId ?? 0;
    return message;
  },
};

function createBaseMsgJoinGameResponse(): MsgJoinGameResponse {
  return {};
}

export const MsgJoinGameResponse: MessageFns<MsgJoinGameResponse> = {
  encode(_: MsgJoinGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgJoinGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgJoinGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgJoinGameResponse {
    return {};
  },

  toJSON(_: MsgJoinGameResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgJoinGameResponse>, I>>(base?: I): MsgJoinGameResponse {
    return MsgJoinGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgJoinGameResponse>, I>>(_: I): MsgJoinGameResponse {
    const message = createBaseMsgJoinGameResponse();
    return message;
  },
};

function createBaseMsgPlayMove(): MsgPlayMove {
  return { creator: "", player: "", gameId: 0, moveHash: "" };
}

export const MsgPlayMove: MessageFns<MsgPlayMove> = {
  encode(message: MsgPlayMove, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.player !== "") {
      writer.uint32(18).string(message.player);
    }
    if (message.gameId !== 0) {
      writer.uint32(24).uint64(message.gameId);
    }
    if (message.moveHash !== "") {
      writer.uint32(34).string(message.moveHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPlayMove {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPlayMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.player = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gameId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.moveHash = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgPlayMove {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      moveHash: isSet(object.moveHash) ? globalThis.String(object.moveHash) : "",
    };
  },

  toJSON(message: MsgPlayMove): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.moveHash !== "") {
      obj.moveHash = message.moveHash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPlayMove>, I>>(base?: I): MsgPlayMove {
    return MsgPlayMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPlayMove>, I>>(object: I): MsgPlayMove {
    const message = createBaseMsgPlayMove();
    message.creator = object.creator ?? "";
    message.player = object.player ?? "";
    message.gameId = object.gameId ?? 0;
    message.moveHash = object.moveHash ?? "";
    return message;
  },
};

function createBaseMsgPlayMoveResponse(): MsgPlayMoveResponse {
  return {};
}

export const MsgPlayMoveResponse: MessageFns<MsgPlayMoveResponse> = {
  encode(_: MsgPlayMoveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgPlayMoveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgPlayMoveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgPlayMoveResponse {
    return {};
  },

  toJSON(_: MsgPlayMoveResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgPlayMoveResponse>, I>>(base?: I): MsgPlayMoveResponse {
    return MsgPlayMoveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgPlayMoveResponse>, I>>(_: I): MsgPlayMoveResponse {
    const message = createBaseMsgPlayMoveResponse();
    return message;
  },
};

function createBaseMsgRevealMove(): MsgRevealMove {
  return { creator: "", player: "", gameId: 0, move: "", nonce: "" };
}

export const MsgRevealMove: MessageFns<MsgRevealMove> = {
  encode(message: MsgRevealMove, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.player !== "") {
      writer.uint32(18).string(message.player);
    }
    if (message.gameId !== 0) {
      writer.uint32(24).uint64(message.gameId);
    }
    if (message.move !== "") {
      writer.uint32(34).string(message.move);
    }
    if (message.nonce !== "") {
      writer.uint32(42).string(message.nonce);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevealMove {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevealMove();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.player = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gameId = longToNumber(reader.uint64());
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.move = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.nonce = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgRevealMove {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
      move: isSet(object.move) ? globalThis.String(object.move) : "",
      nonce: isSet(object.nonce) ? globalThis.String(object.nonce) : "",
    };
  },

  toJSON(message: MsgRevealMove): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    if (message.move !== "") {
      obj.move = message.move;
    }
    if (message.nonce !== "") {
      obj.nonce = message.nonce;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevealMove>, I>>(base?: I): MsgRevealMove {
    return MsgRevealMove.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevealMove>, I>>(object: I): MsgRevealMove {
    const message = createBaseMsgRevealMove();
    message.creator = object.creator ?? "";
    message.player = object.player ?? "";
    message.gameId = object.gameId ?? 0;
    message.move = object.move ?? "";
    message.nonce = object.nonce ?? "";
    return message;
  },
};

function createBaseMsgRevealMoveResponse(): MsgRevealMoveResponse {
  return {};
}

export const MsgRevealMoveResponse: MessageFns<MsgRevealMoveResponse> = {
  encode(_: MsgRevealMoveResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgRevealMoveResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgRevealMoveResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgRevealMoveResponse {
    return {};
  },

  toJSON(_: MsgRevealMoveResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgRevealMoveResponse>, I>>(base?: I): MsgRevealMoveResponse {
    return MsgRevealMoveResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgRevealMoveResponse>, I>>(_: I): MsgRevealMoveResponse {
    const message = createBaseMsgRevealMoveResponse();
    return message;
  },
};

function createBaseMsgClaimTimeout(): MsgClaimTimeout {
  return { creator: "", player: "", gameId: 0 };
}

export const MsgClaimTimeout: MessageFns<MsgClaimTimeout> = {
  encode(message: MsgClaimTimeout, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.creator !== "") {
      writer.uint32(10).string(message.creator);
    }
    if (message.player !== "") {
      writer.uint32(18).string(message.player);
    }
    if (message.gameId !== 0) {
      writer.uint32(24).uint64(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimTimeout {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimTimeout();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.player = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.gameId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgClaimTimeout {
    return {
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      player: isSet(object.player) ? globalThis.String(object.player) : "",
      gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0,
    };
  },

  toJSON(message: MsgClaimTimeout): unknown {
    const obj: any = {};
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.player !== "") {
      obj.player = message.player;
    }
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimTimeout>, I>>(base?: I): MsgClaimTimeout {
    return MsgClaimTimeout.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimTimeout>, I>>(object: I): MsgClaimTimeout {
    const message = createBaseMsgClaimTimeout();
    message.creator = object.creator ?? "";
    message.player = object.player ?? "";
    message.gameId = object.gameId ?? 0;
    return message;
  },
};

function createBaseMsgClaimTimeoutResponse(): MsgClaimTimeoutResponse {
  return {};
}

export const MsgClaimTimeoutResponse: MessageFns<MsgClaimTimeoutResponse> = {
  encode(_: MsgClaimTimeoutResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgClaimTimeoutResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgClaimTimeoutResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgClaimTimeoutResponse {
    return {};
  },

  toJSON(_: MsgClaimTimeoutResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgClaimTimeoutResponse>, I>>(base?: I): MsgClaimTimeoutResponse {
    return MsgClaimTimeoutResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgClaimTimeoutResponse>, I>>(_: I): MsgClaimTimeoutResponse {
    const message = createBaseMsgClaimTimeoutResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * UpdateParams defines a (governance) operation for updating the module
   * parameters. The authority defaults to the x/gov module account.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse>;
  JoinGame(request: MsgJoinGame): Promise<MsgJoinGameResponse>;
  PlayMove(request: MsgPlayMove): Promise<MsgPlayMoveResponse>;
  RevealMove(request: MsgRevealMove): Promise<MsgRevealMoveResponse>;
  ClaimTimeout(request: MsgClaimTimeout): Promise<MsgClaimTimeoutResponse>;
}

export const MsgServiceName = "red.rps.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.UpdateParams = this.UpdateParams.bind(this);
    this.CreateGame = this.CreateGame.bind(this);
    this.JoinGame = this.JoinGame.bind(this);
    this.PlayMove = this.PlayMove.bind(this);
    this.RevealMove = this.RevealMove.bind(this);
    this.ClaimTimeout = this.ClaimTimeout.bind(this);
  }
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) => MsgUpdateParamsResponse.decode(new BinaryReader(data)));
  }

  CreateGame(request: MsgCreateGame): Promise<MsgCreateGameResponse> {
    const data = MsgCreateGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "CreateGame", data);
    return promise.then((data) => MsgCreateGameResponse.decode(new BinaryReader(data)));
  }

  JoinGame(request: MsgJoinGame): Promise<MsgJoinGameResponse> {
    const data = MsgJoinGame.encode(request).finish();
    const promise = this.rpc.request(this.service, "JoinGame", data);
    return promise.then((data) => MsgJoinGameResponse.decode(new BinaryReader(data)));
  }

  PlayMove(request: MsgPlayMove): Promise<MsgPlayMoveResponse> {
    const data = MsgPlayMove.encode(request).finish();
    const promise = this.rpc.request(this.service, "PlayMove", data);
    return promise.then((data) => MsgPlayMoveResponse.decode(new BinaryReader(data)));
  }

  RevealMove(request: MsgRevealMove): Promise<MsgRevealMoveResponse> {
    const data = MsgRevealMove.encode(request).finish();
    const promise = this.rpc.request(this.service, "RevealMove", data);
    return promise.then((data) => MsgRevealMoveResponse.decode(new BinaryReader(data)));
  }

  ClaimTimeout(request: MsgClaimTimeout): Promise<MsgClaimTimeoutResponse> {
    const data = MsgClaimTimeout.encode(request).finish();
    const promise = this.rpc.request(this.service, "ClaimTimeout", data);
    return promise.then((data) => MsgClaimTimeoutResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
