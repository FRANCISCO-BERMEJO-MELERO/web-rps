// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: roshambo/rps/game.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../cosmos/base/v1beta1/coin";

export const protobufPackage = "roshambo.rps";

export interface Game {
  id: number;
  creator: string;
  opponent: string;
  bet: Coin | undefined;
  creatorHash: string;
  opponentHash: string;
  creatorMove: string;
  opponentMove: string;
  state: string;
  winner: string;
  deadline: number;
  createdAt: number;
}

function createBaseGame(): Game {
  return {
    id: 0,
    creator: "",
    opponent: "",
    bet: undefined,
    creatorHash: "",
    opponentHash: "",
    creatorMove: "",
    opponentMove: "",
    state: "",
    winner: "",
    deadline: 0,
    createdAt: 0,
  };
}

export const Game: MessageFns<Game> = {
  encode(message: Game, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).uint64(message.id);
    }
    if (message.creator !== "") {
      writer.uint32(18).string(message.creator);
    }
    if (message.opponent !== "") {
      writer.uint32(26).string(message.opponent);
    }
    if (message.bet !== undefined) {
      Coin.encode(message.bet, writer.uint32(34).fork()).join();
    }
    if (message.creatorHash !== "") {
      writer.uint32(42).string(message.creatorHash);
    }
    if (message.opponentHash !== "") {
      writer.uint32(50).string(message.opponentHash);
    }
    if (message.creatorMove !== "") {
      writer.uint32(58).string(message.creatorMove);
    }
    if (message.opponentMove !== "") {
      writer.uint32(66).string(message.opponentMove);
    }
    if (message.state !== "") {
      writer.uint32(74).string(message.state);
    }
    if (message.winner !== "") {
      writer.uint32(82).string(message.winner);
    }
    if (message.deadline !== 0) {
      writer.uint32(88).uint64(message.deadline);
    }
    if (message.createdAt !== 0) {
      writer.uint32(96).uint64(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Game {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGame();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = longToNumber(reader.uint64());
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.creator = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.opponent = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.bet = Coin.decode(reader, reader.uint32());
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.creatorHash = reader.string();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.opponentHash = reader.string();
          continue;
        }
        case 7: {
          if (tag !== 58) {
            break;
          }

          message.creatorMove = reader.string();
          continue;
        }
        case 8: {
          if (tag !== 66) {
            break;
          }

          message.opponentMove = reader.string();
          continue;
        }
        case 9: {
          if (tag !== 74) {
            break;
          }

          message.state = reader.string();
          continue;
        }
        case 10: {
          if (tag !== 82) {
            break;
          }

          message.winner = reader.string();
          continue;
        }
        case 11: {
          if (tag !== 88) {
            break;
          }

          message.deadline = longToNumber(reader.uint64());
          continue;
        }
        case 12: {
          if (tag !== 96) {
            break;
          }

          message.createdAt = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Game {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      creator: isSet(object.creator) ? globalThis.String(object.creator) : "",
      opponent: isSet(object.opponent) ? globalThis.String(object.opponent) : "",
      bet: isSet(object.bet) ? Coin.fromJSON(object.bet) : undefined,
      creatorHash: isSet(object.creatorHash) ? globalThis.String(object.creatorHash) : "",
      opponentHash: isSet(object.opponentHash) ? globalThis.String(object.opponentHash) : "",
      creatorMove: isSet(object.creatorMove) ? globalThis.String(object.creatorMove) : "",
      opponentMove: isSet(object.opponentMove) ? globalThis.String(object.opponentMove) : "",
      state: isSet(object.state) ? globalThis.String(object.state) : "",
      winner: isSet(object.winner) ? globalThis.String(object.winner) : "",
      deadline: isSet(object.deadline) ? globalThis.Number(object.deadline) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.Number(object.createdAt) : 0,
    };
  },

  toJSON(message: Game): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.creator !== "") {
      obj.creator = message.creator;
    }
    if (message.opponent !== "") {
      obj.opponent = message.opponent;
    }
    if (message.bet !== undefined) {
      obj.bet = Coin.toJSON(message.bet);
    }
    if (message.creatorHash !== "") {
      obj.creatorHash = message.creatorHash;
    }
    if (message.opponentHash !== "") {
      obj.opponentHash = message.opponentHash;
    }
    if (message.creatorMove !== "") {
      obj.creatorMove = message.creatorMove;
    }
    if (message.opponentMove !== "") {
      obj.opponentMove = message.opponentMove;
    }
    if (message.state !== "") {
      obj.state = message.state;
    }
    if (message.winner !== "") {
      obj.winner = message.winner;
    }
    if (message.deadline !== 0) {
      obj.deadline = Math.round(message.deadline);
    }
    if (message.createdAt !== 0) {
      obj.createdAt = Math.round(message.createdAt);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Game>, I>>(base?: I): Game {
    return Game.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Game>, I>>(object: I): Game {
    const message = createBaseGame();
    message.id = object.id ?? 0;
    message.creator = object.creator ?? "";
    message.opponent = object.opponent ?? "";
    message.bet = (object.bet !== undefined && object.bet !== null) ? Coin.fromPartial(object.bet) : undefined;
    message.creatorHash = object.creatorHash ?? "";
    message.opponentHash = object.opponentHash ?? "";
    message.creatorMove = object.creatorMove ?? "";
    message.opponentMove = object.opponentMove ?? "";
    message.state = object.state ?? "";
    message.winner = object.winner ?? "";
    message.deadline = object.deadline ?? 0;
    message.createdAt = object.createdAt ?? 0;
    return message;
  },
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
