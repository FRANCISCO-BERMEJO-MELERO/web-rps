// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.6.1
//   protoc               unknown
// source: roshambo/rps/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { PageRequest, PageResponse } from "../../cosmos/base/query/v1beta1/pagination";
import { Game } from "./game";
import { Params } from "./params";

export const protobufPackage = "roshambo.rps";

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {
}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

export interface QueryGameRequest {
  gameId: number;
}

export interface QueryGameResponse {
  game: Game | undefined;
}

export interface QueryGamesRequest {
  paginated: string;
  pagination: PageRequest | undefined;
}

export interface QueryGamesResponse {
  games: Game[];
  pagination: PageResponse | undefined;
}

export interface QueryGamesByPlayerRequest {
  address: string;
}

export interface QueryGamesByPlayerResponse {
  games: Game[];
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(_: QueryParamsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(base?: I): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(_: I): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(message: QueryParamsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryParamsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return { params: isSet(object.params) ? Params.fromJSON(object.params) : undefined };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(base?: I): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(object: I): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params = (object.params !== undefined && object.params !== null)
      ? Params.fromPartial(object.params)
      : undefined;
    return message;
  },
};

function createBaseQueryGameRequest(): QueryGameRequest {
  return { gameId: 0 };
}

export const QueryGameRequest: MessageFns<QueryGameRequest> = {
  encode(message: QueryGameRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.gameId !== 0) {
      writer.uint32(8).uint64(message.gameId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.gameId = longToNumber(reader.uint64());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameRequest {
    return { gameId: isSet(object.gameId) ? globalThis.Number(object.gameId) : 0 };
  },

  toJSON(message: QueryGameRequest): unknown {
    const obj: any = {};
    if (message.gameId !== 0) {
      obj.gameId = Math.round(message.gameId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameRequest>, I>>(base?: I): QueryGameRequest {
    return QueryGameRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameRequest>, I>>(object: I): QueryGameRequest {
    const message = createBaseQueryGameRequest();
    message.gameId = object.gameId ?? 0;
    return message;
  },
};

function createBaseQueryGameResponse(): QueryGameResponse {
  return { game: undefined };
}

export const QueryGameResponse: MessageFns<QueryGameResponse> = {
  encode(message: QueryGameResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.game !== undefined) {
      Game.encode(message.game, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGameResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGameResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.game = Game.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGameResponse {
    return { game: isSet(object.game) ? Game.fromJSON(object.game) : undefined };
  },

  toJSON(message: QueryGameResponse): unknown {
    const obj: any = {};
    if (message.game !== undefined) {
      obj.game = Game.toJSON(message.game);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGameResponse>, I>>(base?: I): QueryGameResponse {
    return QueryGameResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGameResponse>, I>>(object: I): QueryGameResponse {
    const message = createBaseQueryGameResponse();
    message.game = (object.game !== undefined && object.game !== null) ? Game.fromPartial(object.game) : undefined;
    return message;
  },
};

function createBaseQueryGamesRequest(): QueryGamesRequest {
  return { paginated: "", pagination: undefined };
}

export const QueryGamesRequest: MessageFns<QueryGamesRequest> = {
  encode(message: QueryGamesRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.paginated !== "") {
      writer.uint32(10).string(message.paginated);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGamesRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGamesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.paginated = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGamesRequest {
    return {
      paginated: isSet(object.paginated) ? globalThis.String(object.paginated) : "",
      pagination: isSet(object.pagination) ? PageRequest.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryGamesRequest): unknown {
    const obj: any = {};
    if (message.paginated !== "") {
      obj.paginated = message.paginated;
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGamesRequest>, I>>(base?: I): QueryGamesRequest {
    return QueryGamesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGamesRequest>, I>>(object: I): QueryGamesRequest {
    const message = createBaseQueryGamesRequest();
    message.paginated = object.paginated ?? "";
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageRequest.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGamesResponse(): QueryGamesResponse {
  return { games: [], pagination: undefined };
}

export const QueryGamesResponse: MessageFns<QueryGamesResponse> = {
  encode(message: QueryGamesResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.games) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGamesResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGamesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games.push(Game.decode(reader, reader.uint32()));
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGamesResponse {
    return {
      games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => Game.fromJSON(e)) : [],
      pagination: isSet(object.pagination) ? PageResponse.fromJSON(object.pagination) : undefined,
    };
  },

  toJSON(message: QueryGamesResponse): unknown {
    const obj: any = {};
    if (message.games?.length) {
      obj.games = message.games.map((e) => Game.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGamesResponse>, I>>(base?: I): QueryGamesResponse {
    return QueryGamesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGamesResponse>, I>>(object: I): QueryGamesResponse {
    const message = createBaseQueryGamesResponse();
    message.games = object.games?.map((e) => Game.fromPartial(e)) || [];
    message.pagination = (object.pagination !== undefined && object.pagination !== null)
      ? PageResponse.fromPartial(object.pagination)
      : undefined;
    return message;
  },
};

function createBaseQueryGamesByPlayerRequest(): QueryGamesByPlayerRequest {
  return { address: "" };
}

export const QueryGamesByPlayerRequest: MessageFns<QueryGamesByPlayerRequest> = {
  encode(message: QueryGamesByPlayerRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.address !== "") {
      writer.uint32(10).string(message.address);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGamesByPlayerRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGamesByPlayerRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.address = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGamesByPlayerRequest {
    return { address: isSet(object.address) ? globalThis.String(object.address) : "" };
  },

  toJSON(message: QueryGamesByPlayerRequest): unknown {
    const obj: any = {};
    if (message.address !== "") {
      obj.address = message.address;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGamesByPlayerRequest>, I>>(base?: I): QueryGamesByPlayerRequest {
    return QueryGamesByPlayerRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGamesByPlayerRequest>, I>>(object: I): QueryGamesByPlayerRequest {
    const message = createBaseQueryGamesByPlayerRequest();
    message.address = object.address ?? "";
    return message;
  },
};

function createBaseQueryGamesByPlayerResponse(): QueryGamesByPlayerResponse {
  return { games: [] };
}

export const QueryGamesByPlayerResponse: MessageFns<QueryGamesByPlayerResponse> = {
  encode(message: QueryGamesByPlayerResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.games) {
      Game.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryGamesByPlayerResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryGamesByPlayerResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.games.push(Game.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryGamesByPlayerResponse {
    return { games: globalThis.Array.isArray(object?.games) ? object.games.map((e: any) => Game.fromJSON(e)) : [] };
  },

  toJSON(message: QueryGamesByPlayerResponse): unknown {
    const obj: any = {};
    if (message.games?.length) {
      obj.games = message.games.map((e) => Game.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryGamesByPlayerResponse>, I>>(base?: I): QueryGamesByPlayerResponse {
    return QueryGamesByPlayerResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryGamesByPlayerResponse>, I>>(object: I): QueryGamesByPlayerResponse {
    const message = createBaseQueryGamesByPlayerResponse();
    message.games = object.games?.map((e) => Game.fromPartial(e)) || [];
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Queries a list of Game items. */
  Game(request: QueryGameRequest): Promise<QueryGameResponse>;
  /** Queries a list of Games items. */
  Games(request: QueryGamesRequest): Promise<QueryGamesResponse>;
  /** Queries a list of GamesByPlayer items. */
  GamesByPlayer(request: QueryGamesByPlayerRequest): Promise<QueryGamesByPlayerResponse>;
}

export const QueryServiceName = "roshambo.rps.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Game = this.Game.bind(this);
    this.Games = this.Games.bind(this);
    this.GamesByPlayer = this.GamesByPlayer.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) => QueryParamsResponse.decode(new BinaryReader(data)));
  }

  Game(request: QueryGameRequest): Promise<QueryGameResponse> {
    const data = QueryGameRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Game", data);
    return promise.then((data) => QueryGameResponse.decode(new BinaryReader(data)));
  }

  Games(request: QueryGamesRequest): Promise<QueryGamesResponse> {
    const data = QueryGamesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Games", data);
    return promise.then((data) => QueryGamesResponse.decode(new BinaryReader(data)));
  }

  GamesByPlayer(request: QueryGamesByPlayerRequest): Promise<QueryGamesByPlayerResponse> {
    const data = QueryGamesByPlayerRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "GamesByPlayer", data);
    return promise.then((data) => QueryGamesByPlayerResponse.decode(new BinaryReader(data)));
  }
}

interface Rpc {
  request(service: string, method: string, data: Uint8Array): Promise<Uint8Array>;
}

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
